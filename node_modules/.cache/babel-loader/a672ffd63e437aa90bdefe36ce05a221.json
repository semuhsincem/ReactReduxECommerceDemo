{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\nexport default function cartReducer(state = initialState.cart, action) {\n  switch (action.type) {\n    case actionTypes.ADD_PRODUCT_INTO_CART:\n      var addedItem = state.find(x => x.product.id === action.payload.id);\n\n      if (addedItem) {\n        let newState = state.map(cartItem => {\n          if (cartItem.product.id === action.payload.product.id) {\n            return Object.assign({}, addedItem, {\n              quantity: addedItem.quantity + 1\n            });\n          } else {}\n        });\n        return cartItem;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/muhsincem/Desktop/React/northwind-redux/src/redux/reducers/cartReducer.js"],"names":["actionTypes","initialState","cartReducer","state","cart","action","type","ADD_PRODUCT_INTO_CART","addedItem","find","x","product","id","payload","newState","map","cartItem","Object","assign","quantity"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGF,YAAY,CAACG,IAA1C,EAAgDC,MAAhD,EAAwD;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACO,qBAAjB;AACG,UAAIC,SAAS,GAAGL,KAAK,CAACM,IAAN,CAAWC,CAAC,IAAEA,CAAC,CAACC,OAAF,CAAUC,EAAV,KAAiBP,MAAM,CAACQ,OAAP,CAAeD,EAA9C,CAAhB;;AACA,UAAGJ,SAAH,EAAa;AACX,YAAIM,QAAQ,GAAGX,KAAK,CAACY,GAAN,CAAUC,QAAQ,IAAG;AAClC,cAAGA,QAAQ,CAACL,OAAT,CAAiBC,EAAjB,KAAwBP,MAAM,CAACQ,OAAP,CAAeF,OAAf,CAAuBC,EAAlD,EAAqD;AACnD,mBAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBV,SAAjB,EAA2B;AAACW,cAAAA,QAAQ,EAAGX,SAAS,CAACW,QAAV,GAAsB;AAAlC,aAA3B,CAAP;AACD,WAFD,MAEK,CAEJ;AACF,SANc,CAAf;AAOA,eAAOH,QAAP;AACD;;AACJ;AACE,aAAOb,KAAP;AAdJ;AAgBD","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function cartReducer(state = initialState.cart, action) {\n  switch (action.type) {\n    case actionTypes.ADD_PRODUCT_INTO_CART:\n       var addedItem = state.find(x=>x.product.id === action.payload.id);\n       if(addedItem){\n         let newState = state.map(cartItem =>{\n           if(cartItem.product.id === action.payload.product.id){\n             return Object.assign({},addedItem,{quantity : addedItem.quantity  + 1});\n           }else{\n\n           }\n         })\n         return cartItem\n       }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}