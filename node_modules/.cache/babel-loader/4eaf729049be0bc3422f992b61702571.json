{"ast":null,"code":"/*global define*/\n(function (global, undefined) {\n  \"use strict\";\n\n  var document = global.document,\n      Alertify;\n\n  Alertify = function () {\n    var _alertify = {},\n        dialogs = {},\n        isopen = false,\n        keys = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32\n    },\n        queue = [],\n        $,\n        elCallee,\n        elCover,\n        elDialog,\n        elLog;\n    /**\n     * Markup pieces\n     * @type {Object}\n     */\n\n    dialogs = {\n      buttons: {\n        holder: \"<nav class=\\\"alertify-buttons\\\">{{buttons}}</nav>\",\n        submit: \"<button type=\\\"submit\\\" class=\\\"alertify-button alertify-button-ok\\\" id=\\\"alertify-ok\\\" />{{ok}}</button>\",\n        ok: \"<a href=\\\"#\\\" class=\\\"alertify-button alertify-button-ok\\\" id=\\\"alertify-ok\\\">{{ok}}</a>\",\n        cancel: \"<a href=\\\"#\\\" class=\\\"alertify-button alertify-button-cancel\\\" id=\\\"alertify-cancel\\\">{{cancel}}</a>\"\n      },\n      input: \"<div class=\\\"alertify-text-wrapper\\\"><input type=\\\"text\\\" class=\\\"alertify-text\\\" id=\\\"alertify-text\\\"></div>\",\n      message: \"<p class=\\\"alertify-message\\\">{{message}}</p>\",\n      log: \"<article class=\\\"alertify-log{{class}}\\\">{{message}}</article>\"\n    };\n    /**\n     * Shorthand for document.getElementById()\n     *\n     * @param  {String} id    A specific element ID\n     * @return {Object}       HTML element\n     */\n\n    $ = function (id) {\n      return document.getElementById(id);\n    };\n    /**\n     * Alertify private object\n     * @type {Object}\n     */\n\n\n    _alertify = {\n      /**\n       * Labels object\n       * @type {Object}\n       */\n      labels: {\n        ok: \"OK\",\n        cancel: \"Cancel\"\n      },\n\n      /**\n       * Delay number\n       * @type {Number}\n       */\n      delay: 5000,\n\n      /**\n       * Set the proper button click events\n       *\n       * @param {Function} fn    [Optional] Callback function\n       *\n       * @return {undefined}\n       */\n      addListeners: function (fn) {\n        var btnReset = $(\"alertify-resetFocus\"),\n            btnOK = $(\"alertify-ok\") || undefined,\n            btnCancel = $(\"alertify-cancel\") || undefined,\n            input = $(\"alertify-text\") || undefined,\n            form = $(\"alertify-form\") || undefined,\n            hasOK = typeof btnOK !== \"undefined\",\n            hasCancel = typeof btnCancel !== \"undefined\",\n            hasInput = typeof input !== \"undefined\",\n            val = \"\",\n            self = this,\n            ok,\n            cancel,\n            common,\n            key,\n            reset; // ok event handler\n\n        ok = function (event) {\n          if (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n          common(event);\n          if (typeof input !== \"undefined\") val = input.value;\n          if (typeof fn === \"function\") fn(true, val);\n        }; // cancel event handler\n\n\n        cancel = function (event) {\n          if (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n          common(event);\n          if (typeof fn === \"function\") fn(false);\n        }; // common event handler (keyup, ok and cancel)\n\n\n        common = function (event) {\n          self.hide();\n          self.unbind(document.body, \"keyup\", key);\n          self.unbind(btnReset, \"focus\", reset);\n          if (hasInput) self.unbind(form, \"submit\", ok);\n          if (hasOK) self.unbind(btnOK, \"click\", ok);\n          if (hasCancel) self.unbind(btnCancel, \"click\", cancel);\n        }; // keyup handler\n\n\n        key = function (event) {\n          var keyCode = event.keyCode;\n          if (keyCode === keys.SPACE && !hasInput) ok(event);\n          if (keyCode === keys.ESC && hasCancel) cancel(event);\n        }; // reset focus to first item in the dialog\n\n\n        reset = function (event) {\n          if (hasInput) input.focus();else if (hasCancel) btnCancel.focus();else btnOK.focus();\n        }; // handle reset focus link\n        // this ensures that the keyboard focus does not\n        // ever leave the dialog box until an action has\n        // been taken\n\n\n        this.bind(btnReset, \"focus\", reset); // handle OK click\n\n        if (hasOK) this.bind(btnOK, \"click\", ok); // handle Cancel click\n\n        if (hasCancel) this.bind(btnCancel, \"click\", cancel); // listen for keys, Cancel => ESC\n\n        this.bind(document.body, \"keyup\", key); // bind form submit\n\n        if (hasInput) this.bind(form, \"submit\", ok); // set focus on OK button or the input text\n\n        global.setTimeout(function () {\n          if (input) {\n            input.focus();\n            input.select();\n          } else btnOK.focus();\n        }, 50);\n      },\n\n      /**\n       * Bind events to elements\n       *\n       * @param  {Object}   el       HTML Object\n       * @param  {Event}    event    Event to attach to element\n       * @param  {Function} fn       Callback function\n       *\n       * @return {undefined}\n       */\n      bind: function (el, event, fn) {\n        if (typeof el.addEventListener === \"function\") {\n          el.addEventListener(event, fn, false);\n        } else if (el.attachEvent) {\n          el.attachEvent(\"on\" + event, fn);\n        }\n      },\n\n      /**\n       * Build the proper message box\n       *\n       * @param  {Object} item    Current object in the queue\n       *\n       * @return {String}         An HTML string of the message box\n       */\n      build: function (item) {\n        var html = \"\",\n            type = item.type,\n            message = item.message,\n            css = item.cssClass || \"\";\n        html += \"<div class=\\\"alertify-dialog\\\">\";\n        if (type === \"prompt\") html += \"<form id=\\\"alertify-form\\\">\";\n        html += \"<article class=\\\"alertify-inner\\\">\";\n        html += dialogs.message.replace(\"{{message}}\", message);\n        if (type === \"prompt\") html += dialogs.input;\n        html += dialogs.buttons.holder;\n        html += \"</article>\";\n        if (type === \"prompt\") html += \"</form>\";\n        html += \"<a id=\\\"alertify-resetFocus\\\" class=\\\"alertify-resetFocus\\\" href=\\\"#\\\">Reset Focus</a>\";\n        html += \"</div>\";\n\n        switch (type) {\n          case \"confirm\":\n            html = html.replace(\"{{buttons}}\", dialogs.buttons.cancel + dialogs.buttons.ok);\n            html = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n            break;\n\n          case \"prompt\":\n            html = html.replace(\"{{buttons}}\", dialogs.buttons.cancel + dialogs.buttons.submit);\n            html = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n            break;\n\n          case \"alert\":\n            html = html.replace(\"{{buttons}}\", dialogs.buttons.ok);\n            html = html.replace(\"{{ok}}\", this.labels.ok);\n            break;\n\n          default:\n            break;\n        }\n\n        elDialog.className = \"alertify alertify-show alertify-\" + type + \" \" + css;\n        elCover.className = \"alertify-cover\";\n        return html;\n      },\n\n      /**\n       * Close the log messages\n       *\n       * @param  {Object} elem    HTML Element of log message to close\n       * @param  {Number} wait    [optional] Time (in ms) to wait before automatically hiding the message\n       *\n       * @return {undefined}\n       */\n      close: function (elem, wait) {\n        var timer = wait && !isNaN(wait) ? +wait : this.delay; // Unary Plus: +\"2\" === 2\n\n        this.bind(elem, \"click\", function () {\n          elLog.removeChild(elem);\n        });\n        setTimeout(function () {\n          if (typeof elem !== \"undefined\" && elem.parentNode === elLog) elLog.removeChild(elem);\n        }, timer);\n      },\n\n      /**\n       * Create a dialog box\n       *\n       * @param  {String}   message        The message passed from the callee\n       * @param  {String}   type           Type of dialog to create\n       * @param  {Function} fn             [Optional] Callback function\n       * @param  {String}   placeholder    [Optional] Default value for prompt input field\n       * @param  {String}   cssClass       [Optional] Class(es) to append to dialog box\n       *\n       * @return {Object}\n       */\n      dialog: function (message, type, fn, placeholder, cssClass) {\n        // set the current active element\n        // this allows the keyboard focus to be resetted\n        // after the dialog box is closed\n        elCallee = document.activeElement; // check to ensure the alertify dialog element\n        // has been successfully created\n\n        var check = function () {\n          if (elDialog && elDialog.scrollTop !== null) return;else check();\n        }; // error catching\n\n\n        if (typeof message !== \"string\") throw new Error(\"message must be a string\");\n        if (typeof type !== \"string\") throw new Error(\"type must be a string\");\n        if (typeof fn !== \"undefined\" && typeof fn !== \"function\") throw new Error(\"fn must be a function\"); // initialize alertify if it hasn't already been done\n\n        if (typeof this.init === \"function\") {\n          this.init();\n          check();\n        }\n\n        queue.push({\n          type: type,\n          message: message,\n          callback: fn,\n          placeholder: placeholder,\n          cssClass: cssClass\n        });\n        if (!isopen) this.setup();\n        return this;\n      },\n\n      /**\n       * Extend the log method to create custom methods\n       *\n       * @param  {String} type    Custom method name\n       *\n       * @return {Function}\n       */\n      extend: function (type) {\n        if (typeof type !== \"string\") throw new Error(\"extend method must have exactly one paramter\");\n        return function (message, wait) {\n          this.log(message, type, wait);\n          return this;\n        };\n      },\n\n      /**\n       * Hide the dialog and rest to defaults\n       *\n       * @return {undefined}\n       */\n      hide: function () {\n        // remove reference from queue\n        queue.splice(0, 1); // if items remaining in the queue\n\n        if (queue.length > 0) this.setup();else {\n          isopen = false;\n          elDialog.className = \"alertify alertify-hide alertify-hidden\";\n          elCover.className = \"alertify-cover alertify-hidden\"; // set focus to the last element or body\n          // after the dialog is closed\n\n          elCallee.focus();\n        }\n      },\n\n      /**\n       * Initialize Alertify\n       * Create the 2 main elements\n       *\n       * @return {undefined}\n       */\n      init: function () {\n        // ensure legacy browsers support html5 tags\n        document.createElement(\"nav\");\n        document.createElement(\"article\");\n        document.createElement(\"section\"); // cover\n\n        elCover = document.createElement(\"div\");\n        elCover.setAttribute(\"id\", \"alertify-cover\");\n        elCover.className = \"alertify-cover alertify-hidden\";\n        document.body.appendChild(elCover); // main element\n\n        elDialog = document.createElement(\"section\");\n        elDialog.setAttribute(\"id\", \"alertify\");\n        elDialog.className = \"alertify alertify-hidden\";\n        document.body.appendChild(elDialog); // log element\n\n        elLog = document.createElement(\"section\");\n        elLog.setAttribute(\"id\", \"alertify-logs\");\n        elLog.className = \"alertify-logs\";\n        document.body.appendChild(elLog); // set tabindex attribute on body element\n        // this allows script to give it focus\n        // after the dialog is closed\n\n        document.body.setAttribute(\"tabindex\", \"0\"); // clean up init method\n\n        delete this.init;\n      },\n\n      /**\n       * Show a new log message box\n       *\n       * @param  {String} message    The message passed from the callee\n       * @param  {String} type       [Optional] Optional type of log message\n       * @param  {Number} wait       [Optional] Time (in ms) to wait before auto-hiding the log\n       *\n       * @return {Object}\n       */\n      log: function (message, type, wait) {\n        // check to ensure the alertify dialog element\n        // has been successfully created\n        var check = function () {\n          if (elLog && elLog.scrollTop !== null) return;else check();\n        }; // initialize alertify if it hasn't already been done\n\n\n        if (typeof this.init === \"function\") {\n          this.init();\n          check();\n        }\n\n        this.notify(message, type, wait);\n        return this;\n      },\n\n      /**\n       * Add new log message\n       * If a type is passed, a class name \"alertify-log-{type}\" will get added.\n       * This allows for custom look and feel for various types of notifications.\n       *\n       * @param  {String} message    The message passed from the callee\n       * @param  {String} type       [Optional] Type of log message\n       * @param  {Number} wait       [Optional] Time (in ms) to wait before auto-hiding\n       *\n       * @return {undefined}\n       */\n      notify: function (message, type, wait) {\n        var log = document.createElement(\"article\");\n        log.className = \"alertify-log\" + (typeof type === \"string\" && type !== \"\" ? \" alertify-log-\" + type : \"\");\n        log.innerHTML = message; // prepend child\n\n        elLog.insertBefore(log, elLog.firstChild); // triggers the CSS animation\n\n        setTimeout(function () {\n          log.className = log.className + \" alertify-log-show\";\n        }, 50);\n        this.close(log, wait);\n      },\n\n      /**\n       * Set properties\n       *\n       * @param {Object} args     Passing parameters\n       *\n       * @return {undefined}\n       */\n      set: function (args) {\n        var k; // error catching\n\n        if (typeof args !== \"object\" && args instanceof Array) throw new Error(\"args must be an object\"); // set parameters\n\n        for (k in args) {\n          if (args.hasOwnProperty(k)) {\n            this[k] = args[k];\n          }\n        }\n      },\n\n      /**\n       * Initiate all the required pieces for the dialog box\n       *\n       * @return {undefined}\n       */\n      setup: function () {\n        var item = queue[0];\n        isopen = true;\n        elDialog.innerHTML = this.build(item);\n        if (typeof item.placeholder === \"string\" && item.placeholder !== \"\") $(\"alertify-text\").value = item.placeholder;\n        this.addListeners(item.callback);\n      },\n\n      /**\n       * Unbind events to elements\n       *\n       * @param  {Object}   el       HTML Object\n       * @param  {Event}    event    Event to detach to element\n       * @param  {Function} fn       Callback function\n       *\n       * @return {undefined}\n       */\n      unbind: function (el, event, fn) {\n        if (typeof el.removeEventListener === \"function\") {\n          el.removeEventListener(event, fn, false);\n        } else if (el.detachEvent) {\n          el.detachEvent(\"on\" + event, fn);\n        }\n      }\n    };\n    return {\n      alert: function (message, fn, cssClass) {\n        _alertify.dialog(message, \"alert\", fn, \"\", cssClass);\n\n        return this;\n      },\n      confirm: function (message, fn, cssClass) {\n        _alertify.dialog(message, \"confirm\", fn, \"\", cssClass);\n\n        return this;\n      },\n      extend: _alertify.extend,\n      init: _alertify.init,\n      log: function (message, type, wait) {\n        _alertify.log(message, type, wait);\n\n        return this;\n      },\n      prompt: function (message, fn, placeholder, cssClass) {\n        _alertify.dialog(message, \"prompt\", fn, placeholder, cssClass);\n\n        return this;\n      },\n      success: function (message, wait) {\n        _alertify.log(message, \"success\", wait);\n\n        return this;\n      },\n      error: function (message, wait) {\n        _alertify.log(message, \"error\", wait);\n\n        return this;\n      },\n      set: function (args) {\n        _alertify.set(args);\n      },\n      labels: _alertify.labels\n    };\n  }; // AMD and window support\n\n\n  if (typeof define === \"function\") {\n    define([], function () {\n      return new Alertify();\n    });\n  } else {\n    if (typeof global.alertify === \"undefined\") {\n      global.alertify = new Alertify();\n    }\n  }\n})(this);","map":{"version":3,"sources":["/Users/muhsincem/Desktop/React/northwind-redux/node_modules/alertify/src/alertify.js"],"names":["global","undefined","document","Alertify","_alertify","dialogs","isopen","keys","ENTER","ESC","SPACE","queue","$","elCallee","elCover","elDialog","elLog","buttons","holder","submit","ok","cancel","input","message","log","id","getElementById","labels","delay","addListeners","fn","btnReset","btnOK","btnCancel","form","hasOK","hasCancel","hasInput","val","self","common","key","reset","event","preventDefault","value","hide","unbind","body","keyCode","focus","bind","setTimeout","select","el","addEventListener","attachEvent","build","item","html","type","css","cssClass","replace","className","close","elem","wait","timer","isNaN","removeChild","parentNode","dialog","placeholder","activeElement","check","scrollTop","Error","init","push","callback","setup","extend","splice","length","createElement","setAttribute","appendChild","notify","innerHTML","insertBefore","firstChild","set","args","k","Array","hasOwnProperty","removeEventListener","detachEvent","alert","confirm","prompt","success","error","define","alertify"],"mappings":"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","sourcesContent":["/*global define*/\n(function (global, undefined) {\n\t\"use strict\";\n\n\tvar document = global.document,\n\t    Alertify;\n\n\tAlertify = function () {\n\n\t\tvar _alertify = {},\n\t\t    dialogs   = {},\n\t\t    isopen    = false,\n\t\t    keys      = { ENTER: 13, ESC: 27, SPACE: 32 },\n\t\t    queue     = [],\n\t\t    $, elCallee, elCover, elDialog, elLog;\n\n\t\t/**\n\t\t * Markup pieces\n\t\t * @type {Object}\n\t\t */\n\t\tdialogs = {\n\t\t\tbuttons : {\n\t\t\t\tholder : \"<nav class=\\\"alertify-buttons\\\">{{buttons}}</nav>\",\n\t\t\t\tsubmit : \"<button type=\\\"submit\\\" class=\\\"alertify-button alertify-button-ok\\\" id=\\\"alertify-ok\\\" />{{ok}}</button>\",\n\t\t\t\tok     : \"<a href=\\\"#\\\" class=\\\"alertify-button alertify-button-ok\\\" id=\\\"alertify-ok\\\">{{ok}}</a>\",\n\t\t\t\tcancel : \"<a href=\\\"#\\\" class=\\\"alertify-button alertify-button-cancel\\\" id=\\\"alertify-cancel\\\">{{cancel}}</a>\"\n\t\t\t},\n\t\t\tinput   : \"<div class=\\\"alertify-text-wrapper\\\"><input type=\\\"text\\\" class=\\\"alertify-text\\\" id=\\\"alertify-text\\\"></div>\",\n\t\t\tmessage : \"<p class=\\\"alertify-message\\\">{{message}}</p>\",\n\t\t\tlog     : \"<article class=\\\"alertify-log{{class}}\\\">{{message}}</article>\"\n\t\t};\n\n\t\t/**\n\t\t * Shorthand for document.getElementById()\n\t\t *\n\t\t * @param  {String} id    A specific element ID\n\t\t * @return {Object}       HTML element\n\t\t */\n\t\t$ = function (id) {\n\t\t\treturn document.getElementById(id);\n\t\t};\n\n\t\t/**\n\t\t * Alertify private object\n\t\t * @type {Object}\n\t\t */\n\t\t_alertify = {\n\n\t\t\t/**\n\t\t\t * Labels object\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t\tlabels : {\n\t\t\t\tok     : \"OK\",\n\t\t\t\tcancel : \"Cancel\"\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Delay number\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tdelay : 5000,\n\n\t\t\t/**\n\t\t\t * Set the proper button click events\n\t\t\t *\n\t\t\t * @param {Function} fn    [Optional] Callback function\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\taddListeners : function (fn) {\n\t\t\t\tvar btnReset  = $(\"alertify-resetFocus\"),\n\t\t\t\t    btnOK     = $(\"alertify-ok\")     || undefined,\n\t\t\t\t    btnCancel = $(\"alertify-cancel\") || undefined,\n\t\t\t\t    input     = $(\"alertify-text\")   || undefined,\n\t\t\t\t    form      = $(\"alertify-form\")   || undefined,\n\t\t\t\t    hasOK     = (typeof btnOK !== \"undefined\"),\n\t\t\t\t    hasCancel = (typeof btnCancel !== \"undefined\"),\n\t\t\t\t    hasInput  = (typeof input !== \"undefined\"),\n\t\t\t\t    val       = \"\",\n\t\t\t\t    self      = this,\n\t\t\t\t    ok, cancel, common, key, reset;\n\n\t\t\t\t// ok event handler\n\t\t\t\tok = function (event) {\n\t\t\t\t\tif (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n\t\t\t\t\tcommon(event);\n\t\t\t\t\tif (typeof input !== \"undefined\") val = input.value;\n\t\t\t\t\tif (typeof fn === \"function\") fn(true, val);\n\t\t\t\t};\n\n\t\t\t\t// cancel event handler\n\t\t\t\tcancel = function (event) {\n\t\t\t\t\tif (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n\t\t\t\t\tcommon(event);\n\t\t\t\t\tif (typeof fn === \"function\") fn(false);\n\t\t\t\t};\n\n\t\t\t\t// common event handler (keyup, ok and cancel)\n\t\t\t\tcommon = function (event) {\n\t\t\t\t\tself.hide();\n\t\t\t\t\tself.unbind(document.body, \"keyup\", key);\n\t\t\t\t\tself.unbind(btnReset, \"focus\", reset);\n\t\t\t\t\tif (hasInput) self.unbind(form, \"submit\", ok);\n\t\t\t\t\tif (hasOK) self.unbind(btnOK, \"click\", ok);\n\t\t\t\t\tif (hasCancel) self.unbind(btnCancel, \"click\", cancel);\n\t\t\t\t};\n\n\t\t\t\t// keyup handler\n\t\t\t\tkey = function (event) {\n\t\t\t\t\tvar keyCode = event.keyCode;\n\t\t\t\t\tif (keyCode === keys.SPACE && !hasInput) ok(event);\n\t\t\t\t\tif (keyCode === keys.ESC && hasCancel) cancel(event);\n\t\t\t\t};\n\n\t\t\t\t// reset focus to first item in the dialog\n\t\t\t\treset = function (event) {\n\t\t\t\t\tif (hasInput) input.focus();\n\t\t\t\t\telse if (hasCancel) btnCancel.focus();\n\t\t\t\t\telse btnOK.focus();\n\t\t\t\t};\n\n\t\t\t\t// handle reset focus link\n\t\t\t\t// this ensures that the keyboard focus does not\n\t\t\t\t// ever leave the dialog box until an action has\n\t\t\t\t// been taken\n\t\t\t\tthis.bind(btnReset, \"focus\", reset);\n\t\t\t\t// handle OK click\n\t\t\t\tif (hasOK) this.bind(btnOK, \"click\", ok);\n\t\t\t\t// handle Cancel click\n\t\t\t\tif (hasCancel) this.bind(btnCancel, \"click\", cancel);\n\t\t\t\t// listen for keys, Cancel => ESC\n\t\t\t\tthis.bind(document.body, \"keyup\", key);\n\t\t\t\t// bind form submit\n\t\t\t\tif (hasInput) this.bind(form, \"submit\", ok);\n\t\t\t\t// set focus on OK button or the input text\n\t\t\t\tglobal.setTimeout(function () {\n\t\t\t\t\tif (input) {\n\t\t\t\t\t\tinput.focus();\n\t\t\t\t\t\tinput.select();\n\t\t\t\t\t}\n\t\t\t\t\telse btnOK.focus();\n\t\t\t\t}, 50);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Bind events to elements\n\t\t\t *\n\t\t\t * @param  {Object}   el       HTML Object\n\t\t\t * @param  {Event}    event    Event to attach to element\n\t\t\t * @param  {Function} fn       Callback function\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tbind : function (el, event, fn) {\n\t\t\t\tif (typeof el.addEventListener === \"function\") {\n\t\t\t\t\tel.addEventListener(event, fn, false);\n\t\t\t\t} else if (el.attachEvent) {\n\t\t\t\t\tel.attachEvent(\"on\" + event, fn);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Build the proper message box\n\t\t\t *\n\t\t\t * @param  {Object} item    Current object in the queue\n\t\t\t *\n\t\t\t * @return {String}         An HTML string of the message box\n\t\t\t */\n\t\t\tbuild : function (item) {\n\t\t\t\tvar html    = \"\",\n\t\t\t\t    type    = item.type,\n\t\t\t\t    message = item.message,\n\t\t\t\t    css     = item.cssClass || \"\";\n\n\t\t\t\thtml += \"<div class=\\\"alertify-dialog\\\">\";\n\n\t\t\t\tif (type === \"prompt\") html += \"<form id=\\\"alertify-form\\\">\";\n\n\t\t\t\thtml += \"<article class=\\\"alertify-inner\\\">\";\n\t\t\t\thtml += dialogs.message.replace(\"{{message}}\", message);\n\n\t\t\t\tif (type === \"prompt\") html += dialogs.input;\n\n\t\t\t\thtml += dialogs.buttons.holder;\n\t\t\t\thtml += \"</article>\";\n\n\t\t\t\tif (type === \"prompt\") html += \"</form>\";\n\n\t\t\t\thtml += \"<a id=\\\"alertify-resetFocus\\\" class=\\\"alertify-resetFocus\\\" href=\\\"#\\\">Reset Focus</a>\";\n\t\t\t\thtml += \"</div>\";\n\n\t\t\t\tswitch (type) {\n\t\t\t\tcase \"confirm\":\n\t\t\t\t\thtml = html.replace(\"{{buttons}}\", dialogs.buttons.cancel + dialogs.buttons.ok);\n\t\t\t\t\thtml = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"prompt\":\n\t\t\t\t\thtml = html.replace(\"{{buttons}}\", dialogs.buttons.cancel + dialogs.buttons.submit);\n\t\t\t\t\thtml = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"alert\":\n\t\t\t\t\thtml = html.replace(\"{{buttons}}\", dialogs.buttons.ok);\n\t\t\t\t\thtml = html.replace(\"{{ok}}\", this.labels.ok);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\telDialog.className = \"alertify alertify-show alertify-\" + type + \" \" + css;\n\t\t\t\telCover.className  = \"alertify-cover\";\n\t\t\t\treturn html;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Close the log messages\n\t\t\t *\n\t\t\t * @param  {Object} elem    HTML Element of log message to close\n\t\t\t * @param  {Number} wait    [optional] Time (in ms) to wait before automatically hiding the message\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tclose : function (elem, wait) {\n\t\t\t\tvar timer = (wait && !isNaN(wait)) ? +wait : this.delay; // Unary Plus: +\"2\" === 2\n\t\t\t\tthis.bind(elem, \"click\", function () {\n\t\t\t\t\telLog.removeChild(elem);\n\t\t\t\t});\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (typeof elem !== \"undefined\" && elem.parentNode === elLog) elLog.removeChild(elem);\n\t\t\t\t}, timer);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Create a dialog box\n\t\t\t *\n\t\t\t * @param  {String}   message        The message passed from the callee\n\t\t\t * @param  {String}   type           Type of dialog to create\n\t\t\t * @param  {Function} fn             [Optional] Callback function\n\t\t\t * @param  {String}   placeholder    [Optional] Default value for prompt input field\n\t\t\t * @param  {String}   cssClass       [Optional] Class(es) to append to dialog box\n\t\t\t *\n\t\t\t * @return {Object}\n\t\t\t */\n\t\t\tdialog : function (message, type, fn, placeholder, cssClass) {\n\t\t\t\t// set the current active element\n\t\t\t\t// this allows the keyboard focus to be resetted\n\t\t\t\t// after the dialog box is closed\n\t\t\t\telCallee = document.activeElement;\n\t\t\t\t// check to ensure the alertify dialog element\n\t\t\t\t// has been successfully created\n\t\t\t\tvar check = function () {\n\t\t\t\t\tif (elDialog && elDialog.scrollTop !== null) return;\n\t\t\t\t\telse check();\n\t\t\t\t};\n\t\t\t\t// error catching\n\t\t\t\tif (typeof message !== \"string\") throw new Error(\"message must be a string\");\n\t\t\t\tif (typeof type !== \"string\") throw new Error(\"type must be a string\");\n\t\t\t\tif (typeof fn !== \"undefined\" && typeof fn !== \"function\") throw new Error(\"fn must be a function\");\n\t\t\t\t// initialize alertify if it hasn't already been done\n\t\t\t\tif (typeof this.init === \"function\") {\n\t\t\t\t\tthis.init();\n\t\t\t\t\tcheck();\n\t\t\t\t}\n\n\t\t\t\tqueue.push({ type: type, message: message, callback: fn, placeholder: placeholder, cssClass: cssClass });\n\t\t\t\tif (!isopen) this.setup();\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Extend the log method to create custom methods\n\t\t\t *\n\t\t\t * @param  {String} type    Custom method name\n\t\t\t *\n\t\t\t * @return {Function}\n\t\t\t */\n\t\t\textend : function (type) {\n\t\t\t\tif (typeof type !== \"string\") throw new Error(\"extend method must have exactly one paramter\");\n\t\t\t\treturn function (message, wait) {\n\t\t\t\t\tthis.log(message, type, wait);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Hide the dialog and rest to defaults\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\thide : function () {\n\t\t\t\t// remove reference from queue\n\t\t\t\tqueue.splice(0,1);\n\t\t\t\t// if items remaining in the queue\n\t\t\t\tif (queue.length > 0) this.setup();\n\t\t\t\telse {\n\t\t\t\t\tisopen = false;\n\t\t\t\t\telDialog.className = \"alertify alertify-hide alertify-hidden\";\n\t\t\t\t\telCover.className  = \"alertify-cover alertify-hidden\";\n\t\t\t\t\t// set focus to the last element or body\n\t\t\t\t\t// after the dialog is closed\n\t\t\t\t\telCallee.focus();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Initialize Alertify\n\t\t\t * Create the 2 main elements\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tinit : function () {\n\t\t\t\t// ensure legacy browsers support html5 tags\n\t\t\t\tdocument.createElement(\"nav\");\n\t\t\t\tdocument.createElement(\"article\");\n\t\t\t\tdocument.createElement(\"section\");\n\t\t\t\t// cover\n\t\t\t\telCover = document.createElement(\"div\");\n\t\t\t\telCover.setAttribute(\"id\", \"alertify-cover\");\n\t\t\t\telCover.className = \"alertify-cover alertify-hidden\";\n\t\t\t\tdocument.body.appendChild(elCover);\n\t\t\t\t// main element\n\t\t\t\telDialog = document.createElement(\"section\");\n\t\t\t\telDialog.setAttribute(\"id\", \"alertify\");\n\t\t\t\telDialog.className = \"alertify alertify-hidden\";\n\t\t\t\tdocument.body.appendChild(elDialog);\n\t\t\t\t// log element\n\t\t\t\telLog = document.createElement(\"section\");\n\t\t\t\telLog.setAttribute(\"id\", \"alertify-logs\");\n\t\t\t\telLog.className = \"alertify-logs\";\n\t\t\t\tdocument.body.appendChild(elLog);\n\t\t\t\t// set tabindex attribute on body element\n\t\t\t\t// this allows script to give it focus\n\t\t\t\t// after the dialog is closed\n\t\t\t\tdocument.body.setAttribute(\"tabindex\", \"0\");\n\t\t\t\t// clean up init method\n\t\t\t\tdelete this.init;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Show a new log message box\n\t\t\t *\n\t\t\t * @param  {String} message    The message passed from the callee\n\t\t\t * @param  {String} type       [Optional] Optional type of log message\n\t\t\t * @param  {Number} wait       [Optional] Time (in ms) to wait before auto-hiding the log\n\t\t\t *\n\t\t\t * @return {Object}\n\t\t\t */\n\t\t\tlog : function (message, type, wait) {\n\t\t\t\t// check to ensure the alertify dialog element\n\t\t\t\t// has been successfully created\n\t\t\t\tvar check = function () {\n\t\t\t\t\tif (elLog && elLog.scrollTop !== null) return;\n\t\t\t\t\telse check();\n\t\t\t\t};\n\t\t\t\t// initialize alertify if it hasn't already been done\n\t\t\t\tif (typeof this.init === \"function\") {\n\t\t\t\t\tthis.init();\n\t\t\t\t\tcheck();\n\t\t\t\t}\n\t\t\t\tthis.notify(message, type, wait);\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add new log message\n\t\t\t * If a type is passed, a class name \"alertify-log-{type}\" will get added.\n\t\t\t * This allows for custom look and feel for various types of notifications.\n\t\t\t *\n\t\t\t * @param  {String} message    The message passed from the callee\n\t\t\t * @param  {String} type       [Optional] Type of log message\n\t\t\t * @param  {Number} wait       [Optional] Time (in ms) to wait before auto-hiding\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tnotify : function (message, type, wait) {\n\t\t\t\tvar log = document.createElement(\"article\");\n\t\t\t\tlog.className = \"alertify-log\" + ((typeof type === \"string\" && type !== \"\") ? \" alertify-log-\" + type : \"\");\n\t\t\t\tlog.innerHTML = message;\n\t\t\t\t// prepend child\n\t\t\t\telLog.insertBefore(log, elLog.firstChild);\n\t\t\t\t// triggers the CSS animation\n\t\t\t\tsetTimeout(function() { log.className = log.className + \" alertify-log-show\"; }, 50);\n\t\t\t\tthis.close(log, wait);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Set properties\n\t\t\t *\n\t\t\t * @param {Object} args     Passing parameters\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tset : function (args) {\n\t\t\t\tvar k;\n\t\t\t\t// error catching\n\t\t\t\tif (typeof args !== \"object\" && args instanceof Array) throw new Error(\"args must be an object\");\n\t\t\t\t// set parameters\n\t\t\t\tfor (k in args) {\n\t\t\t\t\tif (args.hasOwnProperty(k)) {\n\t\t\t\t\t\tthis[k] = args[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Initiate all the required pieces for the dialog box\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tsetup : function () {\n\t\t\t\tvar item = queue[0];\n\n\t\t\t\tisopen = true;\n\t\t\t\telDialog.innerHTML = this.build(item);\n\t\t\t\tif (typeof item.placeholder === \"string\" && item.placeholder !== \"\") $(\"alertify-text\").value = item.placeholder;\n\t\t\t\tthis.addListeners(item.callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Unbind events to elements\n\t\t\t *\n\t\t\t * @param  {Object}   el       HTML Object\n\t\t\t * @param  {Event}    event    Event to detach to element\n\t\t\t * @param  {Function} fn       Callback function\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tunbind : function (el, event, fn) {\n\t\t\t\tif (typeof el.removeEventListener === \"function\") {\n\t\t\t\t\tel.removeEventListener(event, fn, false);\n\t\t\t\t} else if (el.detachEvent) {\n\t\t\t\t\tel.detachEvent(\"on\" + event, fn);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\talert   : function (message, fn, cssClass) { _alertify.dialog(message, \"alert\", fn, \"\", cssClass); return this; },\n\t\t\tconfirm : function (message, fn, cssClass) { _alertify.dialog(message, \"confirm\", fn, \"\", cssClass); return this; },\n\t\t\textend  : _alertify.extend,\n\t\t\tinit    : _alertify.init,\n\t\t\tlog     : function (message, type, wait) { _alertify.log(message, type, wait); return this; },\n\t\t\tprompt  : function (message, fn, placeholder, cssClass) { _alertify.dialog(message, \"prompt\", fn, placeholder, cssClass); return this; },\n\t\t\tsuccess : function (message, wait) { _alertify.log(message, \"success\", wait); return this; },\n\t\t\terror   : function (message, wait) { _alertify.log(message, \"error\", wait); return this; },\n\t\t\tset     : function (args) { _alertify.set(args); },\n\t\t\tlabels  : _alertify.labels\n\t\t};\n\t};\n\n\t// AMD and window support\n\tif (typeof define === \"function\") {\n\t\tdefine([], function () { return new Alertify(); });\n\t} else {\n\t\tif (typeof global.alertify === \"undefined\") {\n\t\t\tglobal.alertify = new Alertify();\n\t\t}\n\t}\n\n}(this));"]},"metadata":{},"sourceType":"script"}